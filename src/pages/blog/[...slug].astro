---
import {type CollectionEntry, getCollection, render} from 'astro:content'
import BlogPost from '../../layouts/BlogPost.astro'
import Normal from '../../layouts/Normal.astro'

export async function getStaticPaths() {
	const posts = await getCollection('blog')
	return posts.map((post) => ({
		params: {slug: post.id},
		props: post,
	}))
}

type Props = CollectionEntry<'blog'>

const post = Astro.props

const {Content} = await render(post)
const posts = await getCollection('blog')
const sortedPosts = posts.toSorted((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
const currentPostIndex = sortedPosts.findIndex((post) => post.id == Astro.params.slug)
const previousPost = currentPostIndex + 1 === sortedPosts.length ? undefined : sortedPosts[currentPostIndex + 1]
const nextPost = currentPostIndex === 0 ? undefined : sortedPosts[currentPostIndex - 1]
---

<Normal>
<BlogPost {...post.data}>
	<Content />
</BlogPost>
</Normal>

<footer>
	{(previousPost || nextPost) && (
		<nav>
			{ nextPost && ( <p><a href={`/blog/${nextPost.id}/`}>{nextPost.data.title} &uarr;</a></p> ) }
			{ previousPost && ( <p><a href={`/blog/${previousPost.id}/`}>&darr; {previousPost.data.title}</a></p> ) }
		</nav>
	)}
</footer>

<style>
	footer {
		margin: 0 0 2rem 4vw;

		p {
			margin: 0;
		}
	}
</style>
