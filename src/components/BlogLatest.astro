---
import {getCollection, render} from 'astro:content'
import {YouTube} from 'astro-embed'

// import FormattedDate from './FormattedDate.astro'

interface Props {
	max?: number
	showContent?: boolean
}

const {max = 10, showContent = false} = Astro.props

const posts = (await getCollection('blog'))
	.filter(x => !x.data.draft)
	.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
	.slice(0, max)
---
<section>
{
	posts.map(async (post) => {
		if (showContent) {
			const { Content } = await render(post)
			return (
				<article class:list={[{Doc: showContent}]}>
					<header>
						<h2>
							<a href={`/blog/${post.id}/`}>
								{post.data.title}
							</a>
						</h2>
						<p>
							<time datetime={post.data.date.toISOString()}>
								{post.data.date.getFullYear()}/{post.data.date.toLocaleDateString('en-US', { month: 'long' })}
							</time>
						</p>
					</header>
					<Content components={{ YouTube }} />
				</article>
			)
		} else {
			return (
				<article>
					<header>
						<h3>
							<a href={`/blog/${post.id}/`}>
								{post.data.title}
							</a>
						</h3>
						<p>
							<time datetime={post.data.date.toISOString()}>
								{post.data.date.getFullYear()}/{post.data.date.toLocaleDateString('en-US', { month: 'long' })}
							</time>
						</p>
					</header>
				</article>
			)
		}
	})
}
</section>
